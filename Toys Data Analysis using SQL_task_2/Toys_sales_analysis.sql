-- creating table products
CREATE TABLE products (
    Product_ID SERIAL PRIMARY KEY,
    Product_Name VARCHAR(255) NOT NULL,
    Product_Category VARCHAR(100),
    Product_Cost NUMERIC(10, 2),
    Product_Price NUMERIC(10, 2)
);

select * from products;

-- creating table stores
CREATE TABLE stores (
    Store_ID SERIAL PRIMARY KEY,
    Store_Name VARCHAR(255) NOT NULL,
    Store_City VARCHAR(100),
    Store_Location VARCHAR(255),
    Store_Open_Date DATE
);

select * from stores;

-- creating table sales
CREATE TABLE sales (
    Sale_ID SERIAL PRIMARY KEY,
    Date DATE NOT NULL,
    Store_ID INT NOT NULL,
    Product_ID INT NOT NULL,
    Units INT NOT NULL,
    FOREIGN KEY (Store_ID) REFERENCES stores(Store_ID),
    FOREIGN KEY (Product_ID) REFERENCES products(Product_ID)
);

select * from sales


-- creating table inventory
CREATE TABLE inventory (
    Store_ID INT NOT NULL,
    Product_ID INT NOT NULL,
    Stock_On_Hand INT NOT NULL,
    PRIMARY KEY (Store_ID, Product_ID),
    FOREIGN KEY (Store_ID) REFERENCES stores(Store_ID),
    FOREIGN KEY (Product_ID) REFERENCES products(Product_ID)
);

select * from products;
select * from stores;
select * from sales;
select * from inventory;


-- Project 1: Maven Toy Data Analysis using SQL

-- 1. What is the total sales revenue generated by each store?
SELECT st.store_name, SUM(p.product_price * s.units) AS total_Sales_revenue
FROM sales s
JOIN stores st ON s.store_id = st.store_id
JOIN products p ON s.product_id = p.product_id
GROUP BY st.store_name
ORDER BY total_sales_revenue DESC

-- 2. Which products are the top-selling in terms of units sold?

SELECT p.product_id, p.product_name, SUM(s.units) AS unit_sold
FROM products p 
JOIN sales s ON p.product_id = s.product_id
GROUP BY p.product_id, p.product_name
ORDER BY unit_sold DESC

-- 3. What is the sales performance by product category?

SELECT p.product_category, SUM(s.units) AS unit_sold, SUM(s.Units * p.Product_Price) AS Total_Revenue
FROM products p
JOIN sales s ON p.product_id = s.product_id
GROUP BY p.product_category
ORDER BY unit_sold DESC

-- 4. What are the current inventory levels for each product at each store?

SELECT st.store_name, p.product_name, SUM(i.stock_on_hand) AS inventory_level
FROM inventory i
JOIN stores st ON i.store_id = st.store_id
JOIN products p ON i.product_id = p.product_id
GROUP BY st.store_name, p.product_name
ORDER BY st.store_name 

-- 5. How do monthly sales trends vary across different stores?

SELECT st.store_name, EXTRACT(MONTH FROM s.date) AS month, 
       SUM(s.units) AS unit_sold, SUM(s.units * p.product_price) AS total_revenue
FROM sales s 
JOIN stores st ON s.store_id = st.store_id
JOIN products p ON s.product_id = p.product_id
GROUP BY st.store_name, month
ORDER BY month, st.store_name

-- 6. Which stores have the highest and lowest sales performance?
(
SELECT st.store_id, st.store_name, SUM(s.units) AS unit_sold, SUM(s.units * p.product_price) AS total_revenue
FROM sales s 
JOIN stores st ON s.store_id = st.store_id
JOIN products p ON s.product_id = p.product_id
GROUP BY st.store_id, st.store_name
ORDER BY total_revenue DESC
LIMIT 1
)
UNION ALL
(
SELECT st.store_id, st.store_name, SUM(s.units) AS unit_sold, SUM(s.units * p.product_price) AS total_revenue
FROM sales s 
JOIN stores st ON s.store_id = st.store_id
JOIN products p ON s.product_id = p.product_id
GROUP BY st.store_id, st.store_name
ORDER BY total_revenue ASC
LIMIT 1
)

-- 7. What is the profit margin for each product?

SELECT product_id, product_name, (product_price - product_cost) AS profit, 
      ROUND(((product_price - product_cost)/product_price) *100, 2) AS profit_margin
FROM products

-- 8. How are sales distributed across different cities?

SELECT st.store_city AS cities, SUM(s.units * p.product_price) AS total_revenue
FROM sales s
JOIN stores st ON s.store_id = st.store_id
JOIN products p ON s.product_id = p.product_id
GROUP BY st.store_city
ORDER BY total_revenue DESC

-- 9. Which products are out of stock in each store?

SELECT st.store_name, p.product_name, i.stock_on_hand AS stocks_left
FROM inventory i
JOIN stores st ON i.store_id = st.store_id
JOIn products p ON i.product_id = p.product_id
WHERE i.stock_on_hand = 0
ORDER BY st.store_name 

-- 10. How do sales vary by specific dates?

SELECT s.date, SUM(s.units) AS unit_sold, SUM(s.units * p.product_price) AS total_revenue
FROM sales s
JOIN products p ON s.product_id = p.product_id
GROUP BY s.date
ORDER BY total_revenue DESC

-- 11. What is the average cost of products in each category?

SELECT product_category, ROUND(AVG(product_cost), 2) AS avg_cost
FROM products
GROUP BY product_category
ORDER BY avg_cost DESC

-- 12. What is the sales growth over time for the entire company?

WITH growth_report AS (
SELECT EXTRACT(MONTH FROM s.date) AS month,
       EXTRACT(YEAR FROM s.date) AS year,
	   SUM(s.units * p.product_price) AS total_revenue
FROM sales s
JOIN products p ON s.product_id = p.product_id
GROUP BY year, month
)
SELECT year, month, total_revenue,
       LAG(total_revenue) OVER (ORDER BY year, month) AS previous_month_revenue,
    ((total_revenue - LAG(total_revenue) OVER (ORDER BY year, month)) / 
     LAG(total_revenue) OVER (ORDER BY year, month)) * 100 AS sales_growth_percentage
FROM growth_report
ORDER BY year, month

-- 13. How does the store open date affect sales performance?

SELECT st.store_open_date, SUM(s.units) AS unit_sold, SUM(s.units * p.product_price) AS total_revenue
FROM sales s
JOIN products p ON s.product_id = p.product_id
JOIN stores st ON s.store_id = st.store_id
GROUP BY st.store_open_date
ORDER BY total_revenue DESC


-- 14. What percentage of total sales does each store contribute?

WITH store_sales AS (
SELECT st.store_id, st.store_name, SUM(s.units * p.product_price) AS total_revenue
FROM sales s
JOIN products p ON s.product_id = p.product_id
JOIN stores st ON s.store_id = st.store_id
GROUP BY st.store_id, st.store_name
),
total_sales AS (
SELECT SUM(total_revenue) AS overall_revenue
FROM store_sales
)

SELECT ss.store_id, ss.store_name, ss.total_revenue, ts.overall_revenue, 
       ROUND((total_revenue/overall_revenue)*100, 2) AS percent_contributed
FROM store_sales ss, total_sales ts
ORDER BY percent_contributed DESC


-- 15. How do sales compare to current stock levels for each product?

SELECT p.product_name, i.stock_on_hand, SUM(s.units * p.product_price) AS total_revenue
FROM products p
JOIN inventory i ON p.product_id = i.product_id
JOIN sales s On p.product_id = s.product_id
GROUP BY p.product_name, i.stock_on_hand
ORDER BY total_revenue DESC, i.stock_on_hand DESC




select * from products;
select * from stores;
select * from sales;
select * from inventory;
